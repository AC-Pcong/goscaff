// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/AC-Pcong/goscaff/internal/handler/user"
	"github.com/AC-Pcong/goscaff/internal/router"
	"github.com/AC-Pcong/goscaff/pkg/config"
	"github.com/AC-Pcong/goscaff/pkg/database"
	"github.com/AC-Pcong/goscaff/pkg/logger"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

// InitializeApp initializes the Gin application with all its dependencies.
func InitializeApp() (*gin.Engine, func(), error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	slogLogger := logger.NewLogger(configConfig)
	db, cleanup, err := database.NewDB(configConfig, slogLogger)
	if err != nil {
		return nil, nil, err
	}
	userHandler := user.NewUserHandler(db, slogLogger)
	engine := router.NewRouter(userHandler, slogLogger)
	return engine, func() {
		cleanup()
	}, nil
}
